@model Client.ViewModels.TicketResoVM

@{
    ViewData["Title"] = "CreateTicket";
    var Guid = ViewData["EmployeeGuid"];
    var jwToken = ViewData["JWToken"];

}


<h1>CreateTicket</h1>

<h4>TicketResoVM</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="CreateTicket">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="SubCategoryGuid" class="control-label"></label>
                <select asp-for="SubCategoryGuid" class="form-control" id="myDropdown"></select>
                <span asp-validation-for="SubCategoryGuid" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Attachment" class="control-label"></label>
                <input type="hidden" asp-for="Attachment" class="form-control" />
                <input type="file" class="form-control" onchange="encodeFile(this)" />
                <span asp-validation-for="Attachment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EmployeeGuid" class="control-label"></label>
                <input asp-for="EmployeeGuid" value="@Guid" class="form-control"/>                
                <span asp-validation-for="EmployeeGuid" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<script>
    let jwToken = "@jwToken";
</script>

@section Scripts {
    <script>
        function encodeFile(input) {
            const file = input.files[0];
            const reader = new FileReader();

            reader.onloadend = function () {
                const bytes = new Uint8Array(reader.result);
                const encodedString = btoa(String.fromCharCode.apply(null, bytes));
                input.previousElementSibling.value = encodedString;
            }

            if (file) {
                reader.readAsArrayBuffer(file);
            }
        }

        fetch('https://localhost:7024/api/SubCategory/Detail', {
            method: 'GET',
            dataType: 'json',
            headers: {
                'Authorization': 'Bearer ' + jwToken
            }
        })
            .then(response => response.json())
            .then(data => {
                // Get the select element
                const dropdown = document.getElementById('myDropdown');

                // Loop through the data and create option elements
                data.data.forEach(subCategory => {
                    const option = document.createElement('option');
                    option.value = subCategory.guid; // Set the value to the subCategory guid
                    option.text = subCategory.name; // Set the text to the subCategory name
                    dropdown.appendChild(option); // Append the option to the select element
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });


    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

